module C {
  extern func malloc(size: i64): uniq &i8;
  extern func realloc(ptr: uniq &i8, size: i64): uniq &i8;
  extern func free(ptr: uniq &i8): unit;
  extern func strcpy(dest: &i8, src: &i8): unit;
  extern func strlen(s: &i8): i64;
  extern func printf(format: &i8, ...): unit;
}

struct Person { name: uniq &i8, age: i32 }

func appendSurname(person: &Person, surname: &i8): unit = {
  let oldNameLen = C::strlen(borrow person->name);
  let newLen = oldNameLen + C::strlen(surname);
  
  let newNameBuf = C::realloc(
    move person->name,                  // move a unique reference
    newLen                              // from behind a borrow
  );

  C::strcpy((borrow newNameBuf)[oldNameLen], surname);

  person->name = newNameBuf;            // compiler makes sure that
                                        // moved refs are put back
};

func main(): i32 = {
  let name: uniq &i8 = C::malloc(7);    // make a unique reference
  C::strcpy(borrow name, "Julius");     // use name without freeing it

  let julius: Person = Person{ name, 42 };
  appendSurname(&julius, " Caesar");
  C::printf("%s\n", borrow julius.name);
  // ~> Julius Caesar

  C::free(julius.name);                 // free the reference
  // C::free(julius.name);              // ERROR: compiler ensures all
                                        // unique refs are freed once
  // C::free(name);                     // ERROR: even with aliasing
  
  0
};

